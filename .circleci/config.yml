# -- templates --------------

aliases:
  - &attach_workspace
      attach_workspace:
        at: .

  - &store_deb_artifacts
      store_artifacts:
        path: "*.deb"

  - &store_rpm_artifacts
      store_artifacts:
        path: "*.rpm"

  - &store_test_results
      store_test_results:
        path: tests

  - &store_test_artifacts
      store_artifacts:
        path: tests

  - &install
      run:
        name: Install tarball
        command: python -m pip install $(echo ligo.org*.tar.*)[test]

  - &install_build_dependencies
      run:
        name: Install build dependencies
        command: |
          set -x;
          apt-get -yqq update;
          apt-get -yqq install swig;

  - &debian_build
      run:
        name: Build
        command: |
          set -x;
          if [[ "${PYTHON_VERSION:0:1}" -eq 3 ]]; then PYTHON3="3"; fi
          apt-get -yqq update;
          apt-get -yqq install \
              dpkg-dev \
              devscripts \
              python${PYTHON3}-pip \
          ;
          pushd $(mktemp -d -p .);
          tar -xf ../ligo.org-*.tar.* --strip-components=1;
          # install build dependencies
          mk-build-deps --tool "apt-get -y" --install --remove;
          # build binary package
          dpkg-buildpackage -us -uc -b;
          popd;
          ls *.deb | xargs -n1 dpkg --info;
          # mv and install
          rm -rf tmp*;
          dpkg --install python*ligo-org*.deb ligo-proxy-utils2*.deb || { \
              apt-get -y -f install;
              dpkg --install python*ligo-org*.deb ligo-proxy-utils2*.deb;
          };

  - &centos_build
      run:
        name: Build
        command: |
          set -x;
          yum -y -q update;
          yum -y -q install \
              rpm-build \
              yum-utils \
              python-srpm-macros \
              python2-pip \
          ;
          # build src rpm
          SRPM=$(rpmbuild --define "_topdir $(pwd)" -ts ./ligo.org-*.tar.* | cut -d\  -f2);
          # install build dependencies
          yum-builddep -y -q ${SRPM};
          # build binary rpm(s)
          rpmbuild --define "_rpmdir $(pwd)" --rebuild ${SRPM};
          # install
          mv */*.rpm .;
          rpm -qilp *.rpm
          yum -y --nogpgcheck localinstall ./python*ligo-org*.rpm ./ligo-proxy-utils2*.rpm;

  - &debian_install_test_dependencies
      run:
        name: Install test dependencies
        command: |
          PYM="${PYTHON_VERSION:0:1}"
          if [[ "${PYM}" -eq 2 ]]; then PYM=""; fi;
          apt-get -yqq install \
              debianutils \
              python${PYM}-pytest \
              python${PYM}-pytest-cov \
              $([[ "${PYM}" == "" ]] && "python-mock") \
          ;

  - &centos_install_test_dependencies
      run:
        name: Install test dependencies
        command: |
          if [[ "${PYTHON_VERSION:0:1}" -eq 2 ]]; then PYXY="2"; else PYXY=${PY3XY}; fi;
          yum -y -q install \
              which \
              python${PYXY}-pytest \
              python${PYXY}-pytest-cov \
              $([ "${PYXY}" -eq 2 ] && "python2-mock") \
          ;
          python${PYTHON_VERSION} -m pip install "pytest~=3.0" "more-itertools < 6.0a0"

  - &test
      run:
        name: Test
        command: |
          set -x;
          # install test requirements
          python${PYTHON_VERSION} -m pip install "pytest" "pytest-cov" "mock ; python_version < '3'"
          # run test suite
          mkdir -pv tests;
          pushd tests;
          python${PYTHON_VERSION} -m pytest \
              --pyargs ligo.org.tests \
              --cov ligo.org \
              --cov-report "" \
              --junitxml=junit.xml \
          ;
          # test --help for scripts
          for script in \
                  ligo-proxy-init \
                  ligo-curl \
          ; do
              python${PYTHON_VERSION} -m coverage run --append $(which ${script}) --version;
          done

  - &coverage_report
      run:
        name: Coverage report
        command: pushd tests && python${PYTHON_VERSION} -m coverage report --show-missing

  - &codecov
      run:
        name: Submit coverage to codecov
        command: |
          # get OS name from CIRCLE_JOB name (ignore if in a python image)
          export IMAGE=$(python${PYTHON_VERSION} -c "print('${CIRCLE_JOB}'.split(':')[-2])")
          if [[ "${IMAGE}" == "python" ]]; then unset IMAGE; fi
          # install codecov
          python${PYTHON_VERSION} -m pip install codecov
          # upload coverage
          python${PYTHON_VERSION} -m codecov --file tests/.coverage --flags $(uname) python${PYTHON_VERSION/./} ${IMAGE}

  - &debian
      steps:
        - checkout
        - *attach_workspace
        - *debian_build
        - *debian_install_test_dependencies
        - *test
        - *coverage_report
        - *codecov
        - *store_test_results
        - *store_test_artifacts
        - *store_deb_artifacts

  - &centos
      steps:
        - checkout
        - *attach_workspace
        - *centos_build
        - *centos_install_test_dependencies
        - *test
        - *coverage_report
        - *codecov
        - *store_test_results
        - *store_test_artifacts
        - *store_rpm_artifacts

  - &python
      steps:
        - checkout
        - *attach_workspace
        - *install_build_dependencies
        - *install
        - *test
        - *coverage_report
        - *codecov
        - *store_test_results
        - *store_test_artifacts

# -- jobs -------------------

version: 2
jobs:
  sdist:
    docker:
      - image: python
    steps:
      - checkout
      - run:
          name: Build tarball
          command: python setup.py --quiet sdist --dist-dir .
      - persist_to_workspace:
          root: .
          paths:
            - "ligo.org-*.tar.gz"

  flake8:
    docker:
      - image: python
    steps:
      - checkout
      - run:
          name: Lint
          command: |
            set -ex;
            python -m pip install "flake8>=3.7.0";
            mkdir -pv tests;
            python -m flake8 --output-file tests/flake8.txt;
      - run:
          name: Create flake8 report
          when: always
          command: |
            set -ex;
            python -m pip install flake8-junit-report;
            python -m junit_conversor tests/flake8.txt tests/junit.xml;
      - *store_test_results
      - *store_test_artifacts

  debian:stretch:2.7:
    <<: *debian
    docker:
      - image: ligo/base:stretch
    environment:
      PYTHON_VERSION: "2.7"

  el7:2.7:
    <<: *centos
    docker:
      - image: ligo/base:el7
    environment:
      PYTHON_VERSION: "2.7"

  python:2.7:
    <<: *python
    docker:
      - image: python:2.7-buster
    environment:
      PYTHON_VERSION: "2.7"

  python:3.6:
    <<: *python
    docker:
      - image: python:3.6-buster
    environment:
      PYTHON_VERSION: "3.6"

  python:3.7:
    <<: *python
    docker:
      - image: python:3.7-buster
    environment:
      PYTHON_VERSION: "3.7"

  #sphinx:
  #  docker:
  #    - image: python
  #  steps:
  #    - checkout
  #    - run:
  #        name: Install
  #        command: python -m pip install .[docs]
  #    - run:
  #        name: Run sphinx-build
  #        command: python setup.py build_sphinx -W

# -- workflow ---------------

workflows:
  version: 2
  build_and_test:
    jobs:
      - sdist
      - flake8
      - debian:stretch:2.7:
          requires:
            - sdist
      - el7:2.7:
          requires:
            - sdist
      - python:2.7:
          requires:
            - sdist
      - python:3.6:
          requires:
            - sdist
      - python:3.7:
          requires:
            - sdist
      #- sphinx
